<?xml version="1.0" encoding="utf-8"?>

<!-- See notes below for definitions that require 2020.3 or newer -->
<dialect name='rocksetDialect'
         class='rockset'
         base='PostgreSQL90Dialect'
         version='18.1'>
 
  <function-map>
  <!--
      function
      Group: Tableau function group. Multiple groups are comma-separated.
      Name: Function name
      Return-type: Tableau data type. These include bool, date, datetime,
                   int, real, spatial, str
  -->
		 
    <function group='numeric' name='ABS' return-type='real'>
      <formula>ABS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ABS' return-type='int'>
      <formula>ABS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ACOS' return-type='real'>
      <formula>ACOS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ASIN' return-type='real'>
      <formula>ASIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN' return-type='real'>
      <formula>ATAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN2' return-type='real'>
      <formula>ATAN2(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>CAST(CEIL(%1) AS INT)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>COS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula><![CDATA[(CASE WHEN %1 <> 0 THEN 1/TAN(%1) ELSE NULL END)]]></formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'> 
      <formula>ROUND(((180/3.1415926535) * %1),10)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='int'>
      <formula>CASE WHEN %2 = 0 THEN NULL ELSE ( %1 / %2 ) END</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>EXP(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>CAST(FLOOR(%1) AS INT)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINX' return-type='real'>
      <formula>(((CASE WHEN (ABS((%2) - (ROUND( ( (%2) / SQRT(3.0) ) ,0 ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (ROUND( ( (%1) / 3.0 ) ,0 ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) - (CASE WHEN ((%1) - (ROUND( ( (%1) / 3.0 ) ,0 ) * 3.0) &lt; 0.0) AND ((CASE WHEN (ABS((%2) - (ROUND( ( (%2) / SQRT(3.0) ) ,0 ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (ROUND( ( (%1) / 3.0 ) ,0 ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) &gt; 0.0) THEN 3.0 ELSE 0.0 END)) + (ROUND( ( (%1) / 3.0 ) ,0 ) * 3.0))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINY' return-type='real'>
      <formula>ROUND( (((CASE WHEN (ABS((%2) - (ROUND( ( (%2) / SQRT(3.0) ), 0 ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (ROUND( ( (%1) / 3.0 ), 0 ) * 3.0))) - 1.0) &gt; 0.0 THEN SQRT(3.0) / 2.0 ELSE 0.0 END) - (CASE WHEN ((%2) - (ROUND( ( (%2) / SQRT(3.0) ), 0 ) * SQRT(3.0)) &lt; 0.0) AND ((CASE WHEN (ABS((%2) - (ROUND( ( (%2) / SQRT(3.0) ), 0 ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (ROUND( ( (%1) / 3.0 ), 0 ) * 3.0))) - 1.0) &gt; 0.0 THEN SQRT(3.0) / 2.0 ELSE 0.0 END) &gt; 0.0) THEN SQRT(3.0) ELSE 0.0 END)) + (ROUND( ( (%2) / SQRT(3.0) ), 0 ) * SQRT(3.0))), 3)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 THEN LN(%1) ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>(CASE WHEN %1 &gt; 0 THEN LOG10(%1) ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula><![CDATA[(CASE WHEN %1 > 0 AND %2 > 0 AND %2 <> 1 THEN LOG2(%1) ELSE NULL END)]]></formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='real'>
      <formula>(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 &gt; %2 THEN %1
	ELSE %2 END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='int'>
      <formula>(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 &gt; %2 THEN %1
	ELSE %2 END)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MIN' return-type='real'>
      <formula>(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 &lt; %2 THEN %1
	ELSE %2 END</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MIN' return-type='int'>
      <formula><![CDATA[(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 < %2 THEN %1
	ELSE %2 END)]]></formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='PI' return-type='real'> 
      <formula>3.1415926535</formula>
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula><![CDATA[(CASE WHEN %1 < 0 AND FLOOR(%2) <> %2 THEN NULL ELSE POWER(%1,%2) END)]]></formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>ROUND(((3.1415926535/180) * %1),10)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>CAST(SIGN(%1) AS INT)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>SIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula><![CDATA[(CASE WHEN %1 < 0 THEN NULL ELSE SQRT(%1) END)]]></formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='real'>
      <formula>POW(%1,2)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='int'>
      <formula>POW(%1,2)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <formula>TAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='real'>
      <formula>COALESCE(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='int'>
      <formula>COALESCE(%1, 0)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='ASCII' return-type='int'> 
      <formula>ASCII(CAST(%1 AS TEXT))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='CHAR' return-type='str'> 
      <formula><![CDATA[(CASE WHEN (%1 >= 0) AND (%1 < 256) THEN CHR(CAST(FLOOR(%1) AS INT)) ELSE NULL END)]]></formula>
      <argument type='real' />
    </function>
    <function group='string' name='CONTAINS' return-type='bool'> <!--TODO: Find why E' appear before param 2?-->
      <formula>(STRPOS(CAST(%1 AS TEXT),CAST(%2 AS TEXT)) &gt; 0)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='ENDSWITH' return-type='bool'>
      <formula><![CDATA[(SUBSTR(RTRIM(CAST(%1 AS TEXT)), (CASE WHEN (LENGTH(RTRIM(CAST(%1 AS TEXT))) - LENGTH(CAST(%2 AS TEXT))) < 0 THEN 1 ELSE LENGTH(RTRIM(CAST(%1 AS TEXT))) - LENGTH(CAST(%2 AS TEXT)) + 1 END), LENGTH(CAST(%2 AS TEXT))) = CAST(%2 AS TEXT))]]></formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>STRPOS(CAST(%1 AS TEXT),CAST(%2 AS TEXT))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>(CASE
	WHEN %3 IS NULL THEN NULL
	WHEN 0 = STRPOS(SUBSTR(CAST(%1 AS TEXT),GREATEST(1,CAST(FLOOR(%3) AS INT))),CAST(%2 AS TEXT)) THEN 0
	ELSE (STRPOS(SUBSTR(CAST(%1 AS TEXT),GREATEST(1,CAST(FLOOR(%3)AS INT))),CAST(%2 AS TEXT)) + GREATEST(1,CAST(FLOOR(%3) AS INT)) - 1)	END)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>(CASE WHEN %2 &gt;= 0 THEN SUBSTR(CAST(%1 AS TEXT), 1, CAST(FLOOR(%2) AS INT)) ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>LENGTH(CAST(%1 AS TEXT))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LOWER' return-type='str'>
      <formula>LOWER(CAST(%1 AS TEXT))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM' return-type='str'>
      <formula>LTRIM(CAST(%1 AS TEXT))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='MAX' return-type='str'>
      <formula>(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 &gt; %2 THEN %1
	ELSE %2 END)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>(CASE WHEN %2 IS NULL THEN NULL ELSE SUBSTR(CAST(%1 AS TEXT), GREATEST(1,CAST(FLOOR(%2) AS INT))) END)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>(CASE WHEN %2 IS NULL THEN NULL ELSE SUBSTR(CAST(%1 AS TEXT), GREATEST(1,CAST(FLOOR(%2) AS INT)), GREATEST(0,CAST(FLOOR(%3) AS INT))) END)</formula>
      <argument type='str' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='MIN' return-type='str'>
      <formula><![CDATA[(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 < %2 THEN %1
	ELSE %2 END)]]></formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT' return-type='str'>
      <formula>(SELECT (REGEXP_MATCHES(%1, %2))[1])</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT_NTH' return-type='str'>
      <formula>(SELECT (REGEXP_MATCHES(%1, %2))[%3])</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='localint' />
    </function>
    <function group='string' name='REGEXP_MATCH' return-type='bool'>
      <formula>(%1 ~ %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_REPLACE' return-type='str'>
      <formula>REGEXP_REPLACE(%1, %2, %3, &apos;g&apos;)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REPLACE' return-type='str'>
      <formula>REPLACE(CAST(%1 AS TEXT), CAST(%2 AS TEXT), CAST(%3 AS TEXT))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>(CASE WHEN %2 &gt;= 0 THEN SUBSTR(CAST(%1 AS TEXT), (LENGTH(CAST(%1 AS TEXT)) - IF(CAST(ROUND(%2) AS INT) > LENGTH(CAST(%1 AS TEXT)), LENGTH(CAST(%1 AS TEXT)),CAST(ROUND(%2) AS INT))) + 1) ELSE NULL END)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='RTRIM' return-type='str'>
      <formula>RTRIM(CAST(%1 AS TEXT))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='SPACE' return-type='str'> <!--Rockset REPEAT returns as Array, so join them to String as required.-->
      <formula>(CASE WHEN %1 &gt;= 0 THEN ARRAY_JOIN(REPEAT(&apos; &apos;, CAST(FLOOR(%1) AS INT)),&apos;&apos;) ELSE NULL END)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
      <formula>(SUBSTR(LTRIM(CAST(%1 AS TEXT)), 1, LENGTH(CAST(%2 AS TEXT))) = CAST(%2 AS TEXT))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>TRIM(CAST(%1 AS TEXT))</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UPPER' return-type='str'>
      <formula>UPPER(CAST(%1 AS TEXT))</formula>
      <argument type='str' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>CAST(EXTRACT(DAY FROM %1) AS INT)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='datetime'>
      <formula>(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 &gt; %2 THEN %1
	ELSE %2 END)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='date'>
      <formula>(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 &gt; %2 THEN %1
	ELSE %2 END)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MIN' return-type='datetime'>
      <formula><![CDATA[(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 < %2 THEN %1
	ELSE %2 END)]]></formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MIN' return-type='date'>
      <formula><![CDATA[(CASE
	WHEN %1 IS NULL OR %2 IS NULL THEN NULL
	WHEN %1 < %2 THEN %1
	ELSE %2 END)]]></formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>CAST(EXTRACT(MONTH FROM %1) AS INT)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>CURRENT_TIMESTAMP</formula>
    </function>
    <function group='date' name='QUARTER' return-type='int'>
      <formula>CAST(EXTRACT(QUARTER FROM %1) AS INT)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='TODAY' return-type='date'>
      <formula>CURRENT_DATE</formula>
    </function>
    <function group='date' name='WEEK' return-type='int'> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <formula>TRY_CAST(FLOOR((7 + EXTRACT(DOY FROM %1) - 2 + EXTRACT(DOW FROM DATE_TRUNC(&apos;YEAR&apos;, %1))) / 7) AS INT)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>CAST(EXTRACT(YEAR FROM %1) AS INT)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>date_trunc(&apos;day&apos;, CAST(&apos;1900-01-01&apos; AS DATE) + %1 * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula><![CDATA[(CASE WHEN TRY_CAST(%1 AS DATE) IS NULL THEN DATE(PARSE_DATETIME_ISO8601(%1)) ELSE TRY_CAST(%1 AS DATE) END)]]></formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='str'>
      <formula>FORMAT_DATE('%Y-%m-%d', %1)</formula>
      <argument type='datetime' />
    </function>
     <function group='cast' name='DATE' return-type='date'>
      <formula>EXTRACT(DATE FROM %1)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>(CAST(&apos;1900-01-01 00:00:00&apos; AS TIMESTAMP) + %1 * INTERVAL &apos;1 DAY&apos;)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' THEN %1 ELSE TIMESTAMP(%1) END)]]></formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(CASE
	WHEN CAST(%1 AS BOOL) THEN 1.0
	WHEN NOT CAST(%1 AS BOOL) THEN 0.0
	ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
	 <function group='join' name='FLOAT' return-type='real'>
      <formula>(CASE
	WHEN CAST(%1 AS BOOL) THEN 1.0
	WHEN NOT CAST(%1 AS BOOL) THEN 0.0
	ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS FLOAT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS FLOAT)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' THEN CAST(UNIX_SECONDS(%1) / ( 60 * 60 * 24) + (365 * 70 + 17) AS FLOAT) ELSE CAST(UNIX_SECONDS(TIMESTAMP(%1)) / ( 60 * 60 * 24) + (365 * 70 + 17) AS FLOAT) END)]]></formula>
      <argument type='datetime' />
    </function>
	<function group='join' name='INT' return-type='int'>
      <formula>(CASE
	WHEN CAST(%1 AS BOOL) THEN 1
	WHEN NOT CAST(%1 AS BOOL) THEN 0
	ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>(CASE
	WHEN CAST(%1 AS BOOL) THEN 1
	WHEN NOT CAST(%1 AS BOOL) THEN 0
	ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(TRUNC(%1) AS INT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(TRUNC(CAST(%1 AS FLOAT)) AS INT)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' THEN FLOOR(( UNIX_SECONDS(%1) / ( 60 * 60 * 24)) + (365 * 70 + 17)) ELSE FLOOR(( UNIX_SECONDS(TIMESTAMP(%1)) / ( 60 * 60 * 24)) + (365 * 70 + 17)) END)]]></formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>(CASE
	WHEN CAST(%1 AS BOOL) THEN &apos;1&apos;
	WHEN NOT CAST(%1 AS BOOL) THEN &apos;0&apos;
	ELSE NULL END)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS TEXT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS TEXT)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' THEN REGEXP_REPLACE(CONCAT(FORMAT_DATETIME('%b %d %Y %I:%M',%1), CASE WHEN EXTRACT(HOUR FROM %1) >=12 then 'PM' ELSE 'AM' END),'\s[0]' ,' ') ELSE CAST(%1 AS TEXT) END)]]></formula>
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='bool'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IFNULL' return-type='real'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IFNULL' return-type='int'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IFNULL' return-type='str'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='date'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>((%1 AND %2) OR ((NOT %1) AND %3))</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE NULL END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>(CASE WHEN CAST(%1 AS BOOL) THEN %2 WHEN NOT CAST(%1 AS BOOL) THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>IF(TRY_CAST(%1 AS TIMESTAMP) IS NOT NULL,CAST(%1 AS TIMESTAMP),NULL)</formula>
      <argument type='str' />
    </function>
    <function group='date' name='ISDATE' return-type='bool'>
      <formula>(TRY_CAST(%1 AS DATE) IS NOT NULL)</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='bool' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='real' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='logical' name='NOT' return-type='bool'>
      <formula>NOT CAST(%1 AS bool)</formula>
      <argument type='int' />
    </function>
    <function group='logical' name='NOT' return-type='bool'>
      <formula>NOT CAST(%1 AS bool)</formula>
      <argument type='real' />
    </function>
    <function group='join' name='NOT' return-type='bool'>
      <formula>NOT CAST(%1 AS bool)</formula>
      <argument type='int' />
    </function>
    <function group='join' name='NOT' return-type='bool'>
      <formula>NOT CAST(%1 AS bool)</formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COLLECT' return-type='spatial'>
      <formula>ST_ForceCollection(ST_Collect(%1::geometry))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='spatial' />
    </function>
    <function group='aggregate' name='CORR' return-type='real'>
      <formula>CORR(%1, %2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(case when %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COVAR' return-type='real'>
      <formula>COVAR_SAMP(%1, %2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COVARP' return-type='real'>
      <formula>COVAR_POP(%1, %2)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL WHEN %2 IS NULL THEN NULL ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='bool'>
      <formula>BOOL_OR(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX' return-type='real'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='int'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MAX' return-type='str'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='datetime'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='date'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MIN' return-type='bool'>
      <formula>BOOL_AND(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN' return-type='real'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='int'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='str'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MIN' return-type='datetime'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MIN' return-type='date'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>STDDEV_SAMP(%1)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>(CASE WHEN COUNT(%1) = 1 THEN 0.0 WHEN COUNT(%1) &gt; 0 THEN (STDDEV_SAMP(%1) * SQRT(COUNT(%1) - 1) / SQRT(COUNT(%1)) ) ELSE NULL END)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='real'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='int'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='VAR' return-type='real'>
      <formula>POWER(STDDEV_SAMP(%1),2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='VARP' return-type='real'>
      <formula>(CASE WHEN COUNT(%1) = 1 THEN 0.0 WHEN COUNT(%1) &gt; 0 THEN POWER(STDDEV_SAMP(%1) * SQRT(COUNT(%1) - 1) / SQRT(COUNT(%1)), 2) ELSE NULL END)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='operator' name='!' return-type='bool'>
      <formula>(NOT %1)</formula>
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 AND NOT %2 OR NOT %1 AND %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>(CASE WHEN %2 = 0 THEN NULL ELSE %1 - FLOOR(ABS(%1)/ABS(%2)) * ABS(%2) * SIGN(%1) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='%' return-type='int'>
      <formula>(%1 % %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&amp;&amp;' return-type='bool'>
      <formula>(%1 AND %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='int'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>(%1 + %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='str'>
      <formula>(%1 || %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='date' THEN (DATETIME(%1, TIME '00:00:00') + %2 * INTERVAL '1 DAY') ELSE (%1 + %2 * INTERVAL '1 DAY') END)]]></formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='date'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='date' THEN (DATETIME(%1, TIME '00:00:00') + %2 * INTERVAL '1 DAY') ELSE (%1 + %2 * INTERVAL '1 DAY') END)]]></formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(-%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' AND TYPEOF(%2)='timestamp' THEN (DURATION_SECONDS((%1 - %2)) /( 1.0 * (60.0 * 60 * 24))) WHEN TYPEOF(%2)='timestamp' THEN (DURATION_SECONDS(TIMESTAMP(%1) - %2) /( 1.0 * (60.0 * 60 * 24))) WHEN TYPEOF(%1)='timestamp' THEN (DURATION_SECONDS(%1 - TIMESTAMP(%2)) /( 1.0 * (60.0 * 60 * 24))) ELSE (DURATION_SECONDS(TIMESTAMP(%1) - TIMESTAMP(%2)) /( 1.0 * (60.0 * 60 * 24))) END)]]></formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(-%1)</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='date' THEN (DATETIME(%1, TIME '00:00:00') - %2 * INTERVAL '1 DAY') ELSE (%1 - %2 * INTERVAL '1 DAY') END)]]></formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='date'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%2)='date' THEN (DATETIME(%1, TIME '00:00:00') - %2 * INTERVAL '1 DAY') ELSE (%1 - %2 * INTERVAL '1 DAY') END)]]></formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(CASE WHEN %2 = 0 THEN NULL ELSE CAST(%1 AS FLOAT) / %2 END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' AND TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((DATE(%1) - DATE(%2))) < 0) WHEN TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((%1 - DATE(%2))) < 0) WHEN TYPEOF(%1)='timestamp' THEN (DURATION_MICROS((DATE(%1) - %2)) < 0) ELSE (DURATION_MICROS((%1 - %2)) < 0) END)]]></formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' AND TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((DATE(%1) - DATE(%2))) <= 0) WHEN TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((%1 - DATE(%2))) <= 0) WHEN TYPEOF(%1)='timestamp' THEN (DURATION_MICROS((DATE(%1) - %2)) <= 0) ELSE (DURATION_MICROS((%1 - %2)) <= 0) END)]]></formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 AND %2 OR NOT %1 AND NOT %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' AND TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((DATE(%1) - DATE(%2))) > 0) WHEN TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((%1 - DATE(%2))) > 0) WHEN TYPEOF(%1)='timestamp' THEN (DURATION_MICROS((DATE(%1) - %2)) > 0) ELSE (DURATION_MICROS((%1 - %2)) > 0) END)]]></formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%1)='timestamp' AND TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((DATE(%1) - DATE(%2))) >= 0) WHEN TYPEOF(%2)='timestamp' THEN (DURATION_MICROS((%1 - DATE(%2))) >= 0) WHEN TYPEOF(%1)='timestamp' THEN (DURATION_MICROS((DATE(%1) - %2)) >= 0) ELSE (DURATION_MICROS((%1 - %2)) >= 0) END)]]></formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula><![CDATA[(CASE WHEN %1 < 0 AND FLOOR(%2) <> %2 THEN NULL ELSE POWER(%1,%2) END)]]></formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='||' return-type='bool'>
      <formula>(%1 OR %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <date-function name='DATEADD' return-type='datetime'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' THEN ( DATETIME(%3) + %2 * INTERVAL '1 %1') ELSE (%3 + %2 * INTERVAL '1 %1') END)]]></formula>
	  <formula part='week'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' THEN ( DATETIME(%3) + %2 * INTERVAL '7 day') ELSE (%3 + %2 * INTERVAL '7 day') END)]]></formula>
      <formula part='quarter'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' THEN (DATETIME(%3)+ %2 * 3 * INTERVAL '1 MONTH')  ELSE (%3+ %2 * 3 * INTERVAL '1 MONTH') END)]]></formula>
      <argument type='localstr' />
      <argument type='int' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( FLOOR(UNIX_SECONDS(%3) / 86400) - FLOOR(UNIX_SECONDS(%2) / 86400) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 86400) - FLOOR(UNIX_SECONDS(%2) / 86400) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( FLOOR(UNIX_SECONDS(%3) / 86400) - FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 86400) AS INT) ELSE CAST( FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 86400) - FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 86400) AS INT) END)]]></formula>
      <formula part='year'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( EXTRACT(YEAR FROM %3) - EXTRACT(YEAR FROM %2) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( EXTRACT(YEAR FROM TIMESTAMP(%3)) - EXTRACT(YEAR FROM %2) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( EXTRACT(YEAR FROM %3) - EXTRACT(YEAR FROM TIMESTAMP(%2)) AS INT) ELSE CAST( EXTRACT(YEAR FROM TIMESTAMP(%3)) - EXTRACT(YEAR FROM TIMESTAMP(%2)) AS INT) END)]]></formula>
      <formula part='quarter'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( (4 * EXTRACT(YEAR FROM %3) + EXTRACT(QUARTER FROM %3)) - (4 * EXTRACT(YEAR FROM %2) + EXTRACT(QUARTER FROM %2)) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( (4 * EXTRACT(YEAR FROM TIMESTAMP(%3)) + EXTRACT(QUARTER FROM TIMESTAMP(%3))) - (4 * EXTRACT(YEAR FROM %2) + EXTRACT(QUARTER FROM %2)) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( EXTRACT(YEAR FROM %3) - EXTRACT(YEAR FROM TIMESTAMP(%2)) AS INT) ELSE CAST( (4 * EXTRACT(YEAR FROM %3) + EXTRACT(QUARTER FROM TIMESTAMP(%3))) - (4 * EXTRACT(YEAR FROM TIMESTAMP(%2)) + EXTRACT(QUARTER FROM TIMESTAMP(%2))) AS INT) END)]]></formula>
      <formula part='month'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( (12 * EXTRACT(YEAR FROM %3) + EXTRACT(MONTH FROM %3)) - (12 * EXTRACT(YEAR FROM %2) + EXTRACT(MONTH FROM %2)) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( (12 * EXTRACT(YEAR FROM TIMESTAMP(%3)) + EXTRACT(MONTH FROM TIMESTAMP(%3))) - (12 * EXTRACT(YEAR FROM %2) + EXTRACT(MONTH FROM %2)) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( (12 * EXTRACT(YEAR FROM %3) + EXTRACT(MONTH FROM %3)) - (12 * EXTRACT(YEAR FROM TIMESTAMP(%2)) + EXTRACT(MONTH FROM TIMESTAMP(%2))) AS INT) ELSE CAST( (12 * EXTRACT(YEAR FROM TIMESTAMP(%3)) + EXTRACT(MONTH FROM TIMESTAMP(%3))) - (12 * EXTRACT(YEAR FROM TIMESTAMP(%2)) + EXTRACT(MONTH FROM TIMESTAMP(%2))) AS INT) END)]]></formula>
      <formula part='week'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( FLOOR(( (FLOOR(UNIX_SECONDS(%3)/ 86400) - EXTRACT(DOW FROM %3) - 2 ) - (FLOOR(UNIX_SECONDS(%2) / 86400)- EXTRACT(DOW FROM %2) -2 ) ) / 7) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( FLOOR(( (FLOOR(UNIX_SECONDS(TIMESTAMP(%3))/ 86400) - EXTRACT(DOW FROM TIMESTAMP(%3)) - 2 ) - (FLOOR(UNIX_SECONDS(%2) / 86400)- EXTRACT(DOW FROM TIMESTAMP(%2)) -2 ) ) / 7) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( FLOOR(( (FLOOR(UNIX_SECONDS(%3)/ 86400) - EXTRACT(DOW FROM TIMESTAMP(%3)) - 2 ) - (FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 86400)- EXTRACT(DOW FROM TIMESTAMP(%2)) -2 ) ) / 7) AS INT) ELSE CAST( FLOOR(( (FLOOR(UNIX_SECONDS(TIMESTAMP(%3))/ 86400) - EXTRACT(DOW FROM TIMESTAMP(%3)) - 2 ) - (FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 86400)- EXTRACT(DOW FROM TIMESTAMP(%2)) -2 ) ) / 7) AS INT) END)]]></formula> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <formula part='hour'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( FLOOR(UNIX_SECONDS(%3) / 3600) - FLOOR(UNIX_SECONDS(%2)) / 3600 AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 3600) - FLOOR(UNIX_SECONDS(%2)) / 3600 AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( FLOOR(UNIX_SECONDS(%3) / 3600) - FLOOR(UNIX_SECONDS(TIMESTAMP(%2))) / 3600 AS INT) ELSE CAST( FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 3600) - FLOOR(UNIX_SECONDS(TIMESTAMP(%2))) / 3600 AS INT) END)]]></formula>
      <formula part='minute'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( (FLOOR(UNIX_SECONDS(%3) / 60) - FLOOR(UNIX_SECONDS(%2) / 60)) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( (FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 60) - FLOOR(UNIX_SECONDS(%2) / 60)) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( (FLOOR(UNIX_SECONDS(%3) / 60) - FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 60)) AS INT) ELSE CAST( (FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 60) - FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 60)) AS INT) END)]]></formula>
      <formula part='second'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( (UNIX_SECONDS(%3) - UNIX_SECONDS(%2)) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( (UNIX_SECONDS(TIMESTAMP(%3)) - UNIX_SECONDS(%2)) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( (UNIX_SECONDS(%3) - UNIX_SECONDS(TIMESTAMP(%2))) AS INT) ELSE CAST( (UNIX_SECONDS(TIMESTAMP(%3)) - UNIX_SECONDS(TIMESTAMP(%2))) AS INT) END)]]></formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula part='week'><![CDATA[(CASE WHEN TYPEOF(%3)='timestamp' AND TYPEOF(%2)='timestamp' THEN CAST( FLOOR(( (FLOOR(UNIX_SECONDS(%3) / 86400) - ((7 + CAST(EXTRACT(DOW FROM %3) AS INT) - 2) % 7)) - (FLOOR(UNIX_SECONDS(%2) / 86400) - ((7 + CAST(EXTRACT(DOW FROM %2) AS INT) - 2) % 7)) ) / 7) AS INT) WHEN TYPEOF(%2)='timestamp' THEN CAST( FLOOR(( (FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 86400) - ((7 + CAST(EXTRACT(DOW FROM TIMESTAMP(%3)) AS INT) - 2) % 7)) - (FLOOR(UNIX_SECONDS(%2) / 86400) - ((7 + CAST(EXTRACT(DOW FROM %2) AS INT) - 2) % 7)) ) / 7) AS INT) WHEN TYPEOF(%3)='timestamp' THEN CAST( FLOOR(( (FLOOR(UNIX_SECONDS(%3) / 86400) - ((7 + CAST(EXTRACT(DOW FROM %3) AS INT) - 2) % 7)) - (FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 86400) - ((7 + CAST(EXTRACT(DOW FROM TIMESTAMP(%2)) AS INT) - 2) % 7)) ) / 7) AS INT) ELSE CAST( FLOOR(( (FLOOR(UNIX_SECONDS(TIMESTAMP(%3)) / 86400) - ((7 + CAST(EXTRACT(DOW FROM TIMESTAMP(%3)) AS INT) - 2) % 7)) - (FLOOR(UNIX_SECONDS(TIMESTAMP(%2)) / 86400) - ((7 + CAST(EXTRACT(DOW FROM TIMESTAMP(%2)) AS INT) - 2) % 7)) ) / 7) AS INT) END)]]></formula> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula>FORMAT_DATETIME(&apos;%1&apos;,%2)</formula>
      <formula part='day'>FORMAT_DATETIME(&apos;%d&apos;,%2)</formula>
      <formula part='dayofyear'>EXTRACT(DOY FROM %2)</formula>
      <formula part='month'>FORMAT_DATETIME(&apos;%B&apos;,%2)</formula>
      <formula part='week'>TRY_CAST(FLOOR((7 + EXTRACT(DOY FROM %2) - 2 + EXTRACT(DOW FROM DATE_TRUNC(&apos;YEAR&apos;, %2))) / 7) AS TEXT)</formula> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <formula part='hour'>FORMAT_DATETIME(&apos;%H&apos;,%2)</formula>
      <formula part='minute'>FORMAT_DATETIME(&apos;%M&apos;,%2)</formula>
      <formula part='second'>FORMAT_DATETIME(&apos;%S&apos;,%2)</formula>
      <formula part='weekday'>FORMAT_DATETIME(&apos;%A&apos;,%2)</formula>
      <formula part='quarter'>EXTRACT(QUARTER FROM %2)</formula>
      <formula part='year'>FORMAT_DATETIME(&apos;%Y&apos;,%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATENAME' return-type='str'> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <formula part='week'>TRY_CAST(FLOOR((7 + EXTRACT(DOY FROM %2) - 1 + (CAST(7 + EXTRACT(DOW FROM DATE_TRUNC(&apos;YEAR&apos;, %2)) - %3 AS INT) % 7) ) / 7) AS TEXT)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <!--<date-function name='DATEPARSE' return-type='datetime'>
      <formula>TO_TIMESTAMP(%2, %1)</formula>
      <argument type='localstr' />
      <argument type='str' />
    </date-function>-->
    <date-function name='DATEPART' return-type='int'>
      <formula>CAST(TRUNC(EXTRACT(%1 FROM %2)) AS INT)</formula>
      <formula part='weekday'>(CAST(EXTRACT(DOW FROM %2) AS INT))</formula> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <formula part='week'>TRY_CAST(FLOOR((7 + EXTRACT(DOY FROM %2) - 2 + EXTRACT(DOW FROM DATE_TRUNC(&apos;YEAR&apos;, %2))) / 7) AS INT)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEPART' return-type='int'> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <formula part='week'>TRY_CAST(FLOOR((7 + EXTRACT(DOY FROM %2) - 1 + (CAST(7 + EXTRACT(DOW FROM DATE_TRUNC(&apos;YEAR&apos;, %2)) - %3 AS INT) % 7)) / 7) AS INT)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula><![CDATA[(CASE WHEN TYPEOF(%2)='timestamp' THEN DATE_TRUNC( '%1', %2) ELSE DATE_TRUNC( '%1', TIMESTAMP(%2)) END)]]></formula>
      <formula part='quarter'>CAST(DATE_TRUNC(&apos;QUARTER&apos;, CAST(%2 AS DATE)) AS DATE)</formula> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <formula part='week'>CAST((DATE_TRUNC( &apos;DAY&apos;, CAST(%2 AS DATE) ) + ((-EXTRACT(DOW FROM %2) +1) * INTERVAL &apos;1 DAY&apos;)) AS DATE)</formula> <!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula part='week'><![CDATA[(CASE WHEN TYPEOF(%2)='timestamp' THEN (CAST(DATE_TRUNC( 'DAY', %2) AS DATE) - (((7 + CAST(EXTRACT(DOW FROM %2) AS INT) - %3) % 7) * INTERVAL '1 DAY')) ELSE (CAST(DATE_TRUNC( 'DAY', TIMESTAMP(%2)) AS DATE) - (((7 + CAST(EXTRACT(DOW FROM %2) AS INT) - %3) % 7) * INTERVAL '1 DAY')) END)]]></formula><!--Rockset SOW is 1(Sunday) , not starts with 0 -->
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <native-split-function> 
      <formula part='left'>SPLIT_PART(%1, %2, %3)</formula>
      <formula part='right'>REVERSE(SPLIT_PART(REVERSE(%1),REVERSE(%2),%3*-1))</formula>
    </native-split-function>
  </function-map>
	 
  <sql-format>
   <date-literal-escape value='PostgresStyle' />
    <date-parts>
      <date-part-group>
        <!-- Default: used by DATEPART and DATEDIFF -->
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DOW' />
        <part name='dayofyear' value='DOY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATENAME' />
        <part name='year' value='YYYY' />
        <part name='quarter' value='Q' />
        <part name='month' value='FMMonth' />
        <part name='dayofyear' value='FMDDD' />
        <part name='day' value='FMDD' />
        <part name='weekday' value='FMDay' />
        <part name='week' value='---' />
        <part name='hour' value='FMHH24' />
        <part name='minute' value='FMMI' />
        <part name='second' value='FMSS' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEADD' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='MONTH' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAY' />
        <part name='dayofyear' value='DAY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATETRUNC' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='MONTH' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAY' />
        <part name='dayofyear' value='DAY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
    </date-parts>
    <format-date-literal formula="(DATE '%1')"  format='yyyy-MM-dd' />
    <format-datetime-literal formula="(TIMESTAMP '%1')" format='yyyy-MM-dd HH:mm:ss.SSS' />
    <format-false literal='FALSE' predicate='FALSE' /> <!-- Requires 2020.3 or newer -->
    <format-is-distinct value='Keyword' />
    <format-order-by value='Nulls' />
    <format-select>
      <part name='Select' value='SELECT %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <part name='Top' value='LIMIT %1' />
    </format-select>
    <format-string-literal value='Extended' />  <!-- Postgres specific -->
    <format-true literal='TRUE' predicate='TRUE' /> <!-- Requires 2020.3 or newer -->
    <!--
      start-of-week-offset
      Tableau's start of week functions assume Sunday is 0.
      This is used to specify an offset. For example, if the
      database says Sunday is 1, the offset value should be 1.
      If Sunday is 6, the offset value should be either 6 or -1.
    -->
    <start-of-week-offset value='1' />
     <!--
      supported-joins
      Enumerated list of supported join types
    -->
    <supported-joins>
      <part name='Inner' />
      <part name='Left' />
      <part name='Right' />
      <part name='Full' />
      <part name='Cross' />
    </supported-joins>
  </sql-format>
</dialect>